#!/usr/bin/python
#file_dist.py: file_distribution involved in both porting 

import sys
import os
import csv
import re
import math

import clone
import config

FREEBSD_RELEASE_DATES = "../../bsd_data/release_dates/freebsd.csv"
OPENBSD_RELEASE_DATES = "../../bsd_data/release_dates/openbsd.csv"
NETBSD_RELEASE_DATES = "../../bsd_data/release_dates/netbsd.csv"

#=====================================================================#
class fileStat:
	def __init__(self,rev,pcent_1,pcent_2,union,intersect,union_abs,total):
		self.rev = rev
		self.pcent_port1 = pcent_1
		self.pcent_port2 = pcent_2
		self.union = union
		self.intersect = intersect
		self.union_abs = union_abs
		self.total = total
#=====================================================================#

def cal_percentage(rev,aset,pset1,pset2):
	
	file_all = set()
	file_port1 = set()
	file_port2 = set()

	#Calculate fileor information	
	for i in aset:
		lineno,filename = tuple(i)
		file_all.add(filename)
	
	for i in pset1:
		lineno,file = tuple(i)
		file_port1.add(file)
	
	for i in pset2:
		lineno,file = tuple(i)
		file_port2.add(file)

	file_union = file_port1.union(file_port2)
	file_intersection = file_port1.intersection(file_port2)

	no_all_file = len(file_all)
	no_port1_file = len(file_port1)
	no_port2_file = len(file_port2)
	no_file_union = len(file_union)
	no_file_intersection = len(file_intersection)

	if config.DEBUG:
		print "all fileors = %d" % no_all_file
		print "ported file 1= %d" % no_port1_file
		print "ported file 2= %d" % no_port2_file
		print "common file = %d" % no_file_intersection
		print "ported file = %d" % no_file_union

	
	percent_1 = float(no_port1_file * 100)/no_all_file
	percent_2 = float(no_port2_file * 100)/no_all_file
	percent_u = float(no_file_union * 100)/no_all_file
	percent_i = float(no_file_intersection * 100)/no_all_file

	return fileStat(rev,percent_1,percent_2,percent_u,percent_i,no_file_union,no_all_file)
	
#=====================================================================#
def walk_dir(directory):

	print "directory name = " + directory
	
	for fileName in os.listdir(directory):
		if (config.DEBUG == 1):
			print fileName
		fname = directory + "/" + fileName
		try:
			csvfile = open(fname,"r")
			reader = csv.reader(csvfile,delimiter=',')
			for row in reader:
				diff_line_num = row[0].strip()
				if diff_line_num.startswith("src"):
					pass
				else:
					srcFileName = row[2]
					f, extn = os.path.splitext(fileName)
					year = config.release_dates[f]
					config.src_file_hash[(f,year,diff_line_num)] = srcFileName
					if (config.all_srcFile_by_rev.has_key(year) == 0):
						config.all_srcFile_by_rev[year] = []
					config.all_srcFile_by_rev[year].append((diff_line_num,srcFileName))
	
		
		except IOError as e:
			print fileName + " doesnot exist"
#print config.all_srcFile_by_rev
#=====================================================================#
#=====================================================================#

if (len(sys.argv) < 5):
	 print "Usage: filedist.py input1.txt input2.txt conv_dir output"
	 print "inputN.txt is the output from repertoire"
	 print "conv_dir contains all files that is generated by parsing diff files: usually in the form of conv_dev"
	 print "format: diff_line_no | source_file_line_no| source_file_name"
	 print "output is the output file"
	 sys.exit(2)

in_file1 = sys.argv[1]
in_file2 = sys.argv[2]
dir_name = sys.argv[3]
conv_file = sys.argv[4] 


print "Input Files : " + in_file1 + "," + in_file2
print "Output Files : " + conv_file 

outf = open(conv_file,"w")

config.hash_release_dates(FREEBSD_RELEASE_DATES)
config.hash_release_dates(OPENBSD_RELEASE_DATES)
config.hash_release_dates(NETBSD_RELEASE_DATES)


walk_dir(dir_name)
clone.process_rep_output(in_file1,1)
clone.process_rep_output(in_file2,2)

printLine = "revision , " + in_file1 + "% port , " + in_file2 + "% port ,%union, %intersection, abs_union, total\n"
outf.write(printLine)

if (config.DEBUG > 0):
	print "======= config.all_srcFile_by_rev ==========="
	print config.all_srcFile_by_rev
	print " ===== config.clone_by_rev1 =========="
	print config.clone_by_rev1
	print " ===== config.clone_by_rev2 =========="
	print config.clone_by_rev2


for key in config.clone_by_rev1.iterkeys():
#	print key
	clone_set1 = set()
	clone_set2 = set()
	ported_files = set()
	all_set = set()

	clone_set1 = set(config.clone_by_rev1[key])

	if (config.clone_by_rev2.has_key(key)):
		clone_set2 = set(config.clone_by_rev2[key])
		
	all_set = set(config.all_srcFile_by_rev[key])
	
	filestat = cal_percentage(key,all_set,clone_set1,clone_set2)
		
	printLine = str(filestat.rev) + "," + str(filestat.pcent_port1) + "," + str(filestat.pcent_port2) + "," + str(filestat.union) + "," + str(filestat.intersect) + "," + str(filestat.union_abs) + "," + str(filestat.total) + "\n"
	outf.write(printLine)
	print printLine

#!/usr/bin/python
#ccfxcsvToMetric.py: This script calculates clone-metric from csv file generated by ccfxoutToCsv.py script

import sys
import csv
import metric
import matrix
import ngram

#=====================================================================#
#Global variables

DEBUG = 0
clones = {}
rownum = 0
dict_index = []
matrix_row = 0
MAX_COL = 7

#=====================================================================#
def debug_print(str):
	if DEBUG:
		print str

#=====================================================================#
def get_row_col(dictStr):
	row = dictStr.partition("-")[0]
	col = dictStr.partition("-")[2]

	return int(row),int(col)



#=====================================================================#
class opsMetric:
	def __init__(self):
		self.add = 0
		self.delete = 0
		self.modification = 0
		self.context = 0
	
	def setMetric(self,ops):
		if (ops.startswith("ADD")):
			self.add += 1
		elif (ops.startswith("DELETE")):
			self.delete += 1
		elif (ops.startswith("MODIFIED")):
			 self.modification += 1
		elif (ops.startswith("NOCHANGE")):
			self.context += 1
		else:
		  pass
	
	def __str__(self):
		return "add : " + str(self.add) + " delete : " + str(self.delete) + " modification : " + str(self.modification) + " context : " + str(self.context)
	
#=====================================================================#
class Change:

	def __init__(self):
		self.id = 0
		self.fileName = ""
		self.fileIndex = 0
		self.version = 0
		self.start = 0
		self.end = 0
		self.delta = 0 
		self.Operations = []
		self.opMetric = opsMetric()
		self.csvname = ""
		self.otherId = [] # if required

#************************************************************************#
	def setOps(self):


		f1 = open(self.csvname, 'r')
		csvreader = csv.reader(f1, delimiter=',')
		isClone = 0

		for row in csvreader:
			if (row[0].startswith("src")):
				pass
			elif (row[1] == self.start):
				isClone = 1
			elif (row[1] == self.end):
				isClone = 0
				self.Operations.append(row[2])
				self.opMetric.setMetric(row[2])
			else:
		 		pass
		 	
			if (isClone == 1):
				if row[0].startswith('src'):
					pass
				else:
					self.Operations.append(row[2])
					self.opMetric.setMetric(row[2])

		f1.close()
	
#************************************************************************#
	def setCsvname(self,version):
		dir = self.name.partition("ccFinderInputFiles")[0]
		
		filename = "diff_" + self.name.partition("diff_")[2]
		Csvname = ""
		OLD = 0
		NEW = 1

		if (self.version == OLD):
			Csvname = dir + "conv_old/" + filename
		else:
		 	Csvname = dir + "conv_new/" + filename

		self.csvname = Csvname.partition(".c")[0] + ".csv"


#************************************************************************#

	def setVal(self,clone_string,version,Files):
	
		self.fileIndex = clone_string.partition(".")[0]

		self.name  = Files[int(self.fileIndex)-1]
		self.version = version
		
		self.start = clone_string.partition(".")[2].partition("-")[0]
		tmpEnd = clone_string.partition(".")[2].partition("-")[2]
		self.end = tmpEnd.partition("(")[0]
		self.delta = (int)(self.end) - (int)(self.start) + 1
#		print "delta = " + str(self.delta)
		
		tmpCid = tmpEnd.partition("(")[2]
		tmpCid = tmpCid.partition(")")[0]
		self.id = tmpCid.partition(" : ")[0]
		tmpCidEnd = tmpCid.partition(" : ")[2]
		cid_delta = int(tmpCidEnd) - int(self.id)
		for i in range(cid_delta):
			self.otherId.append((int)(self.id) + 1 + i)

		self.setCsvname(version)
		if (self.delta > 1):
			self.setOps()	

#************************************************************************#
	
	def __str__(self):
		otherIdstr = ""
		for i in range(len(self.otherId)):
			otherIdstr += " : "
			otherIdstr += str(self.otherId[i])
		
		opStr = ""	
		for i in range(len(self.Operations)):
			opStr += " : "
			opStr += str(self.Operations[i])

		return  str(self.id) + " : " + str(self.fileName) + " : " + str(self.fileIndex) + " : " + str(self.start) + " : " +  str(self.end) + " : " + str(self.delta) + otherIdstr + opStr

		
#=====================================================================#
#=====================================================================#
class Clones:
	def __init__(self):
		self.index = 0
		self.change1 = Change()
		self.change2 = Change()
		self.change_metric = 0

	def setVal(self,clone1,clone2,version,FileList):
		self.change1.setVal(clone1,version,FileList)
		self.change2.setVal(clone2,version,FileList)
		self.change_metric = ngram.cal_metric(self.change1.Operations,self.change2.Operations)
#		print "change_metric = " + str(self.change_metric)
		if DEBUG:
			print "self.change1.delta : " + str(self.change1.delta)
			print "self.change1.Operations : "
			print self.change1.Operations
			print self.change1.opMetric
			print "self.change2.delta : " + str(self.change2.delta)
			print "self.change2.Operations : "
			print self.change2.Operations
			print self.change2.opMetric
			print "self.change_metric : " + str(self.change_metric)
			print "================================================="

	def getVal(self):
		return str(self.change1.fileIndex) + "." + str(self.change1.start) + "-" + str(self.change1.end) + "\t" +  str(self.change2.fileIndex) + "." + str(self.change2.start) + "-" + str(self.change2.end) + "\t" + str(self.change_metric)

	
	


	
#=====================================================================#

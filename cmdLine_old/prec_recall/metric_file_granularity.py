#!/usr/bin/python
#filter.py:  

import sys
import os
import csv
import re
import clone
import sets
import math
#=====================================================================#
KEY_VAL = 0
DEBUG = 0
#=====================================================================#
if (len(sys.argv) < 3):
	 print "Usage: filter.py changelog.csv repertoire.csv"
	 print "changelog.csv is summary of change log containing porting evidence"
	 print "this is generated by parse_log.py"
	 print "repertoire.csv is repertoire output"
	 sys.exit(2)

ch_file = sys.argv[1]
rp_file = sys.argv[2]

print "Input Files : " + ch_file + "," + rp_file

chf = open(ch_file,"r")

ch_reader = csv.reader(chf, delimiter=';')

changeLog_hash = {}

for row in ch_reader:
	fname = row[0].strip()
	version = row[1].strip()
	change_line = row[4]
	add = change_line.partition("lines: +")[2]
	add = add.partition(" -")[0]
#	print fname + "," + version + "," + change_line + "," + add
	if (KEY_VAL):
		key = (fname,version)
	else:
		key = fname

	if (changeLog_hash.has_key(key) == 0):
		changeLog_hash[key] = 0

	if(add != ''):	
		changeLog_hash[key] += int(add)

chf.close()
#print "Change Logs:"
#print changeLog_hash
#print "=============================="
rpf = open(rp_file,"r")

rp_reader = csv.reader(rpf, delimiter=',')

repertoire_hash = {}

for row in rp_reader:
	fname = row[0]
	if fname.startswith("====="):
		pass
	else:
		fname = fname.partition(".csv")[0] + ".c"
		version = row[1].strip()
		change_line = row[6]
		add = change_line.partition(":")[2]
		cl = change_line.partition(":")[0]
#		print fname + "," + version + "," + change_line + "," + add
	
		if (KEY_VAL):
			key = (fname,version)
		else:
			key = fname
		if (repertoire_hash.has_key((key,cl)) == 0):
			repertoire_hash[(key,cl)] = 0

		if(add != ''):	
			repertoire_hash[(key,cl)] = int(add)
		
rpf.close()
#print repertoire_hash


rep_hash = {}
for key in repertoire_hash.iterkeys():
	fname = key[0]
	add = repertoire_hash[key]
	
	if (rep_hash.has_key(fname) == 0):
		rep_hash[fname] = 0

	if(add != ''):	
		rep_hash[fname] += int(add)

#print "Repertoire Results:"
#print rep_hash
#print "==========================="

E = set()
M = set()

for key in rep_hash.iterkeys():
	M.add(key)

for key in changeLog_hash.iterkeys():
	E.add(key)

print M
print "============"
print E

M_E = M.intersection(E)
E_M = E.intersection(M)

#print M_E

prec = float(len(M_E)) / len(M)

print "len E =" + str(len(E)) 
print "len M =" + str(len(M)) 
print "len M_E =" + str(len(M_E)) 
print "len E_M =" + str(len(E_M)) 

recall = float(len(M_E)) / len(E)

print "precision = " + str(prec)
print "recall = " + str(recall)
